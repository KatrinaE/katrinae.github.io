<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Katrina Ellison Geltman</title><link>/</link><description></description><atom:link href="/feeds/katrina-ellison-geltman.rss.xml" rel="self"></atom:link><lastBuildDate>Sun, 27 Dec 2015 16:59:00 +0100</lastBuildDate><item><title>Installing Unison 2.40.63 on OS X El Capitan</title><link>/unison-el-capitan.html</link><description>&lt;p&gt;I recently needed to install Unison version 2.40.63 on a machine running
OS X 10.11 El Capitan. There are no prebuilt binaries available (except
for the GUI versions listed in "The Easy Alternative" below), so I had
to install from source. It was a bit of a pain, but I ultimately got it
working successfully. The trickiest part was figuring out which versions
of Xcode and Ocaml the build required; the actual time to tweak the source
code and make the binary was minimal. &lt;/p&gt;
&lt;h3&gt;The Easy Alternative: Use a similar GUI version&lt;/h3&gt;
&lt;p&gt;It's possible to download &lt;a href="http://unison-binaries.inria.fr/"&gt;official
binaries&lt;/a&gt; of the GUI versions of
Unison 2.40.61 and 2.40.69. These work out of the box, but only in GUI
form - the command line tool installer fails because of El Capitan's
&lt;a href="https://support.apple.com/en-us/HT204899"&gt;System Integrity Protection&lt;/a&gt;,
which prevents writing to /usr/bin/, even with sudo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo /Applications/Unison.app/Contents/MacOS/cltool 
cp: /usr/bin/unison: Operation not permitted
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Building from Source&lt;/h3&gt;
&lt;p&gt;If you want to install the command line version or
specifically need 2.40.63, you can build from the Unison source. You'll need
to install build tools and make a couple of changes to the
Unison source code before running the build script.&lt;/p&gt;
&lt;h4&gt;Step 1: Installing Prerequisites&lt;/h4&gt;
&lt;p&gt;Prerequisites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Xcode&lt;/strong&gt; (download from the &lt;a href="https://itunes.apple.com/us/app/xcode/id497799835?mt=12"&gt;App
  Store&lt;/a&gt;). I
  used version 7.2. 
    &lt;em&gt;Note: you need the full Xcode, not just the command line tools.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;An &lt;strong&gt;OCaml compiler&lt;/strong&gt; (install via Homebrew; see instructions
  below)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Unison 2.40.63 source code&lt;/strong&gt; tarball (download 'unison-2.40.63.tar.gz' from &lt;a href="http://www.seas.upenn.edu/~bcpierce/unison//download/releases/unison-2.40.63/"&gt;the official source&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;Xcode&lt;/h5&gt;
&lt;p&gt;XCode is an Apple IDE and set of SDKs. To build Unison on El Capitan
you'll need the Mac OS X El Capitan SDK, which is only available in the
full version of Xcode. The Unison Makefile also uses some XCode-specific
commands.&lt;/p&gt;
&lt;p&gt;Xcode is a large download ( &amp;gt; 4GB). If you're installing it for the
first time, open it once from the Applications folder so you can accept
the license agreement.&lt;/p&gt;
&lt;h5&gt;OCaml Compiler&lt;/h5&gt;
&lt;p&gt;Unison is written in the OCaml language, but El Capitan does not come
with an OCaml compiler. However, the OCaml package manager, OPAM, is
available via Homebrew and comes with a compiler.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install opam
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, OPAM's default compiler - version 4.02.3 - does not build
Unison correctly. The build will appear successful, but Unison will segfault
immediately. Fortunately, OPAM allows you to specify an alternative version
when you set it up, and to quickly switch between versions after that.
The most recent compiler version that worked for me was 4.01.0, so tell
OPAM to use that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;opam init --comp 4.01.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;OPAM will ask you to let it modify &lt;code&gt;~/.bash_profile&lt;/code&gt; and &lt;code&gt;~/.ocamlinit&lt;/code&gt; so
that it can properly set paths and environment variables. I told it yes
("y") to make life easier.&lt;/p&gt;
&lt;p&gt;Once OPAM is installed, activate it and verify that it works.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;opam config env&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;opam --version
1.2.2
&lt;span class="nv"&gt;$ &lt;/span&gt;ocaml -version
The OCaml toplevel, version 4.01.0
&lt;/pre&gt;&lt;/div&gt;


&lt;h6&gt;Switching Compilers&lt;/h6&gt;
&lt;p&gt;The 4.01.0 compiler should work correctly. However, you may need to use a
different version for some reason, e.g. for compatibility with a remote Unison installation.
Fortunately, this is easy to do. For example, to switch to version 3.12.0 of the compiler, run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;opam switch 3.12.0
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="sb"&gt;`&lt;/span&gt;opam config env&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To see all available compiler versions, use&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;opam switch list
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll need to rebuild Unison after you switch compilers.&lt;/p&gt;
&lt;h5&gt;Source Code Tarball&lt;/h5&gt;
&lt;p&gt;&lt;a href="http://www.seas.upenn.edu/~bcpierce/unison//download/releases/unison-2.40.63/unison-2.40.63.tar.gz"&gt;Download the
tarball&lt;/a&gt;.
If you'd like to keep the source code after installation, move it to
wherever you'd like to put it. (I usually use /usr/local/src).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar -C /usr/local/src -zxvf ~/Downloads/unison-2.40.63.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local/src/unison-2.40.63/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If, on the other hand, you're planning to delete it once the build is complete,
just leave the source code in ~/Downloads.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; ~/Downloads
&lt;span class="nv"&gt;$ &lt;/span&gt;tar -zxvf unison-2.40.63.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;unison-2.40.63
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Step 2: Modifying the Source Code&lt;/h4&gt;
&lt;p&gt;The Mac OS X version is hard-coded to 10.5 in the Unison source,
which prevents it from building correctly on El Capitan. To fix it,
you need to update "10.5" to "10.11" everywhere it appears in the code.
Fortunately, there are not too many places to update:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In &lt;strong&gt;./Makefile.OCaml&lt;/strong&gt;, line 183&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Old line: &lt;code&gt;MINOSXVERSION=10.5&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;New line: &lt;code&gt;MINOSXVERSION=10.11&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;strong&gt;./uimacnew/uimacnew.xcodeproj/project.pbxproj&lt;/strong&gt;, lines 676, 686, and 696&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Old line: &lt;code&gt;SDKROOT = /Developer/SDKs/MacOSX10.5.sdk;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;New line: &lt;code&gt;SDKROOT = /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Note: this is the default location of the OS X 10.11 SDK when
   Xcode is installed from the Mac app store. It may be somewhere
   else on your system.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In &lt;strong&gt;./uimacnew09/uimacnew.xcodeproj/project.pbxproj&lt;/strong&gt;, lines 702, 713, and 724&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Old line: &lt;code&gt;SDKROOT = macosx10.5;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;New line: &lt;code&gt;SDKROOT = macosx10.11;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Step 3: Building&lt;/h4&gt;
&lt;p&gt;It's finally time to build the binary.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local/src/unison-2.40.63      &lt;span class="c"&gt;# Or wherever you put the source code in step 1&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;make &lt;span class="nv"&gt;UISTYLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;text
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the build fails, clean up after it with 'make clean' before trying
again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make clean
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Running Unison without any arguments should bring up the help message. Note that
you'll need to run &lt;code&gt;./unison&lt;/code&gt;, not &lt;code&gt;unison&lt;/code&gt;, as you haven't yet placed it on
your path.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./unison
Usage: unison &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;
    or unison root1 root2 &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;
    or unison profilename &lt;span class="o"&gt;[&lt;/span&gt;options&lt;span class="o"&gt;]&lt;/span&gt;

For a list of options, &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;unison -help&amp;quot;&lt;/span&gt;.
For a tutorial on basic usage, &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;unison -doc tutorial&amp;quot;&lt;/span&gt;.
For other documentation, &lt;span class="nb"&gt;type&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;unison -doc topics&amp;quot;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Testing&lt;/h5&gt;
&lt;p&gt;Test the build locally with the directions in &lt;a href="http://www.seas.upenn.edu/~bcpierce/unison//download/releases/unison-2.40.63/unison-2.40.63-manual.html#local"&gt;the
manual&lt;/a&gt;.
Don't worry if you get a warning that begins "Warning: No archive files
were found for these roots". This is just because it's the first time
you've used Unison with these directories. Press the spacebar to
continue, and make sure the last line of output is "Nothing to do:
replicas have been changed only in identical ways since last sync.".&lt;/p&gt;
&lt;p&gt;If you're planning to use Unison with a remote machine, you should also
test its compatibility with that machine.&lt;/p&gt;
&lt;h5&gt;Adding to Path&lt;/h5&gt;
&lt;p&gt;Once you're confident Unison works to your liking, you'll probably want
to copy or link it to &lt;code&gt;/usr/local/bin/unison&lt;/code&gt; so that you can call it
from anywhere via &lt;code&gt;unison&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you're saving the source somewhere, you can use a symlink.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ln -s /usr/local/src/unison-2.40.63/unison /usr/local/bin/unison
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or you can copy the binary directly. (Note: you'll have to do it this
way if you're planning to remove the source code, since the original
binary is in the source code directory).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cp unison /usr/local/bin/unison
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Troubleshooting&lt;/h3&gt;
&lt;h4&gt;Problem&lt;/h4&gt;
&lt;p&gt;You see messages that look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;make &lt;span class="nv"&gt;UISTYLE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;text
ocamlc -o mkProjectInfo unix.cma str.cma mkProjectInfo.ml
make: ocamlc: No such file or directory
&lt;span class="c"&gt;# [... more error output]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Solution&lt;/h5&gt;
&lt;p&gt;Install an OCaml compiler (see step 1)&lt;/p&gt;
&lt;h4&gt;Problem&lt;/h4&gt;
&lt;p&gt;You see lots of warnings that look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ld&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;object&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;
&lt;span class="o"&gt;(/&lt;/span&gt;&lt;span class="n"&gt;usr&lt;/span&gt;&lt;span class="sr"&gt;/local/lib/ocaml/&lt;/span&gt;&lt;span class="n"&gt;libunix&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rewinddir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;o&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;built&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;newer&lt;/span&gt; &lt;span class="n"&gt;OSX&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.11&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;being&lt;/span&gt; &lt;span class="n"&gt;linked&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;10.5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Solution&lt;/h5&gt;
&lt;p&gt;You need to update the source code to reference version 10.5, not 10.11
(see step 2).&lt;/p&gt;
&lt;h4&gt;Problem&lt;/h4&gt;
&lt;p&gt;Unison runs, but immediately segfaults.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;./unison
0??Segmentation fault: 11
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Solution 1&lt;/h5&gt;
&lt;p&gt;Use a different OCaml compiler (see step 1). Unison will not build on El Capitan
with OCaml 4.02.x. Try 4.01.x instead.&lt;/p&gt;
&lt;h5&gt;Solution 2&lt;/h5&gt;
&lt;p&gt;Make sure you've used the correct path to your OS 10.11 SDK (see step
2). If it's not in
&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk&lt;/code&gt;,
look for it elsewhere(e.g. with mdfind).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mdfind -name .sdk
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Problem&lt;/h4&gt;
&lt;p&gt;Unison works locally, but not with a remote server. The error output contains
something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Fatal error: Internal error: New archives are not identical.
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Solution&lt;/h5&gt;
&lt;p&gt;Recompile with an OCaml compiler that matches the one used on your remote (see the "Switching Compilers" step above). If
you don't know the remote version, start by trying a compiler with a different
major version (e.g. 3.x instead of 4.x).
See also the discussion on &lt;a href="http://unix.stackexchange.com/questions/52945/how-to-fix-unison-failing-with-fatal-error-internal-error-new-archives-are-no"&gt;Stack Exchange&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katrina Ellison Geltman</dc:creator><pubDate>Sun, 27 Dec 2015 16:59:00 +0100</pubDate><guid>tag:,2015-12-27:unison-el-capitan.html</guid></item><item><title>Hacker School Reflections</title><link>/hs-reflections.html</link><description>&lt;p&gt;When I arrived at Hacker School, I laid out the following goals for myself:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;While I'm here, I want to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fill in some gaps
(learn a statically typed language, use git correctly),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finish a 'real' project, &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Explore some cool stuff (right now I'm curious
about algorithms, the Linux kernel, and distributed computing),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generally sharpen my skills (I wrote in my application that I
wanted to become a Python ninja). &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;So... how'd I do?&lt;/p&gt;
&lt;h4&gt;Learning a statically typed language&lt;/h4&gt;
&lt;p&gt;I set this goal for myself because I felt like, having worked mostly
   in Python, I wouldn't be a real programmer until I could use something
   besides a scripting language.&lt;/p&gt;
&lt;p&gt;At Hacker School, I learned to read and write a little bit of Arduino 
   code (a close cousin of C++), and I started learning about low-level 
   concepts like pointers memory allocation (it helped that I read 
   &lt;a href="http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/ref=sr_1_1?s=books&amp;amp;ie=UTF8&amp;amp;qid=1401493596&amp;amp;sr=1-1&amp;amp;keywords=code"&gt;Code&lt;/a&gt; - a great book! - just before arriving). But I didn't spend nearly as much
   time on this as I would have liked because I got distracted by solving 
   problems that arose in my existing projects.&lt;/p&gt;
&lt;h4&gt;Using git correctly&lt;/h4&gt;
&lt;p&gt;I've had some scares (most recently, I accidentally created a duplicate 
   copy of every single commit in a repository), but overall I'm much more
   confident in my git abilities than I was when I arrived at Hacker School.&lt;/p&gt;
&lt;h4&gt;Finishing a 'real' project&lt;/h4&gt;
&lt;p&gt;I did that! I finished my Seating Chart Creator application and handed it off
to my 'client' (the work was pro-bono and open source) earlier this month.&lt;/p&gt;
&lt;h4&gt;Learning algorithms&lt;/h4&gt;
&lt;p&gt;I set this goal because algorithms problems always seemed to involve
solving fun puzzles, and I like doing that. I felt like 
I had missed out on something by failing to study algorithms during undergrad
and then taking a less-than-satisfying course on them afterwords.&lt;/p&gt;
&lt;p&gt;At Hacker School, I became intimately acquainted with 
&lt;a href="/simulated-annealing.html"&gt;simulated annealing&lt;/a&gt;, but I didn't really study
other algorithms. I think I turned away from them because it felt too much 
like being a 'student' and not enough like being a 'real person'. After what
feels like a lifetime of studying things that have no immediate application,
I was ready to focus on more applied skills.&lt;/p&gt;
&lt;h4&gt;Exploring the Linux kernel and distributed computing&lt;/h4&gt;
&lt;p&gt;No and no. Maybe another session at Hacker School is in my future?&lt;/p&gt;
&lt;h4&gt;Becoming a Python ninja&lt;/h4&gt;
&lt;p&gt;Well, I wouldn't say I'm a ninja (aside: I hate that word. Why did I use it?)
but I'm definitely much more well-versed in Python. I'm comfortable writing
idiomatic code, know a bit of what's going on under the covers, and am
comfortable diving into the source code when I need to know more.&lt;/p&gt;
&lt;p&gt;My most satisfying Python learning moment? When I finally understood the syntax
of doubly-nested list comprehensions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c"&gt;# prints [1, 2]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;What else did I do?&lt;/h3&gt;
&lt;p&gt;So if I didn't convincingly achieve all of my goals, what &lt;em&gt;did&lt;/em&gt; I do?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Built an Arduino RC car&lt;/li&gt;
&lt;li&gt;Made a simple web app with Node.js and Angular&lt;/li&gt;
&lt;li&gt;Wrote a bunch of blog posts (never intended to do that!)&lt;/li&gt;
&lt;li&gt;Whiteboarded ideas for reducing a program's execution time&lt;/li&gt;
&lt;li&gt;Heard great tech talks from residents and visiting companies&lt;/li&gt;
&lt;li&gt;Got over my fears of asking for help on IRC and Stack Overflow&lt;/li&gt;
&lt;li&gt;Played other Hacker Schoolers' video games, then learned how they worked&lt;/li&gt;
&lt;li&gt;Received lots of great life/career advice from more experienced Hacker
Schoolers, facilitators, and alums&lt;/li&gt;
&lt;li&gt;Went on many walks along the West Side greenway&lt;/li&gt;
&lt;li&gt;Made tons of great friends&lt;/li&gt;
&lt;li&gt;Became confident I could move to New York if I wanted to&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these 'accomplishments' are intangible, but I'm okay with that. When
you're working, most things have some sort of deliverable that needs to be
delivered at some specific time. Hacker School gave me the luxury of focusing
on the journey itself.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katrina Ellison Geltman</dc:creator><pubDate>Fri, 30 May 2014 18:36:00 +0200</pubDate><guid>tag:,2014-05-30:hs-reflections.html</guid></item><item><title>A Python LRU Cache</title><link>/lru-cache.html</link><description>&lt;p&gt;Caches are structures for storing data for future use so that it doesn't 
have to be re-calculated each time it is accessed. You might be familiar
with them in the context of the web (your browser can cache a page so that it
doesn't need to be reloaded the next time you view it; a server can cache a
page so that its data doesn't need to be regenerated from scratch for the next
client), but caches can be used anywhere that you need to re-retrieve expensive-to-
calculate data. This article ignores the web stuff to focus on the cache
structure.&lt;/p&gt;
&lt;p&gt;A cache has a finite size, so it will eventually run out of room for new results.
The optimal strategy for handling subsequent requests depends on the specific
situation. There are a multitude of such algorithms - Wikipedia has 
&lt;a href="https://en.wikipedia.org/wiki/Cache_algorithms"&gt;a nice list&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;I'm going to 
discuss the least-recently-used (LRU) algorithm, which is probably the most intuitive
strategy. It's useful when the most-recently-accessed content is likely to be the most
desired in the future. &lt;/p&gt;
&lt;h3&gt;LRU Caches&lt;/h3&gt;
&lt;p&gt;In an LRU cache, when a new input arrives, the resulting output is added
to the cache and the oldest output is kicked out. Adding to the cache is much like using 
a FIFO queue: an item is added to one end of the data structure, then eventually 
removed from the other. The items in the cache is always sorted by the time they were
last accessed.&lt;/p&gt;
&lt;p&gt;Retrieving items from the cache is more difficult because a regular queue doesn't allow you
to access items arbitrarily. To solve this problem, we can use a hash map: retrieve an
item by looking it up in the hash map, then keep track of when it was accessed by moving it
to the front of the linked list.&lt;/p&gt;
&lt;h3&gt;Implementation: Linked List + Hash Map&lt;/h3&gt;
&lt;p&gt;In this implementation, results are stored in a circular, 
doubly-linked list, with each result node pointing to the result node just older than it.
When you add a new item to the list, you remove the last item and prepend the new result
to the head. If you need to access an existing item, you find it in the middle of
the list and move it to the head of the list.&lt;/p&gt;
&lt;p&gt;How do you find existing items? You use a hash table. The hashes are representations
of particular inputs, and the values are the result nodes (so each result node has
two pointers on it - one from the hash table, and one from the linked list). &lt;/p&gt;
&lt;p&gt;&lt;img alt="LRU cache architecture" src="/images/lru_cache.png" /&gt;&lt;/p&gt;
&lt;p&gt;In the diagram above, hashed versions of 'func(a)', 'func(b)', etc. would serve
as the keys in the hash table, and the linked list nodes containing 'Most recent',
'Result b', etc. would be the values.&lt;/p&gt;
&lt;p&gt;I've posted a basic Python implementation on 
&lt;a href="https://github.com/KatrinaE/miniprojects/tree/master/lru-cache"&gt;Github&lt;/a&gt;. It has two
separate parts: the cache itself and the circular doubly linked list. The cache is
an object, so you can do things like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LRUCache&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;myfunc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_and_return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;print_items&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python 3 has LRU caches built in, but they're implemented as decorators rather than 
objects. If you want to use a cache with a particular function, you can wrap that
function with an LRU cache decorator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;lru_cache&lt;/span&gt;
&lt;span class="nd"&gt;@lru_cache&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;myfunc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This presentation is perhaps more useful, though the underlying mechanics are exactly the
same (hash map + linked list). In the current Python 3 implementation, the hash
map is a basic dictionary and the 'nodes' in the linked list are 4-element lists
whose items represent the previous item, the next item, the item key, and the item
result.&lt;/p&gt;
&lt;p&gt;And that's it: a simple cache implementation.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katrina Ellison Geltman</dc:creator><pubDate>Mon, 05 May 2014 19:17:00 +0200</pubDate><guid>tag:,2014-05-05:lru-cache.html</guid><category>Python</category></item><item><title>Python Counter Performance</title><link>/python-counter-performance.html</link><description>&lt;p&gt;Python's Counters are a subclass of dictionaries used for tallying how many
times elements occur in an iterable data structure like a list.
I'm writing an application that makes heavy use of Counters -
like creating 10,000,000 counters in one run - and I found that they were
a performance chokepoint. &lt;/p&gt;
&lt;p&gt;Since each of my counters is very
similar to the previous one generated, I hoped that I could improve performance
by continually mutating an existing counter rather than creating all of them from
scratch. I hoped to do this by creating a Counter with a short list of
changes and adding it to my existing Counter.&lt;/p&gt;
&lt;h3&gt;tl;dr&lt;/h3&gt;
&lt;p&gt;Adding Python Counters takes the same amount of time as creating
each of the addend Counters. There's no performance gain from applying
changes to an existing Counter by adding a second one to it vs.
generating a new Counter from scratch.&lt;/p&gt;
&lt;h3&gt;Counter performance vs. dictionary performance&lt;/h3&gt;
&lt;p&gt;Python advertises Counters as 'fast'. For small &lt;em&gt;n&lt;/em&gt; (here, &lt;em&gt;n&lt;/em&gt; = 10) creating one is about 4 times 
slower than creating a regular dictionary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;timeit&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# Timing dictionary creation&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x = { num : &amp;#39;foo&amp;#39; for num in range(0, 10)}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.003952980041503906&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c"&gt;# Timing Counter creation&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;from collections import Counter; x = Counter({ num : &amp;#39;foo&amp;#39; for num in range(0, 10)})&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;0.016061067581176758&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For larger &lt;em&gt;n&lt;/em&gt;, the performance disparity isn't nearly as extreme. Here, &lt;em&gt;n&lt;/em&gt; = 1,000,000 and 
Counter creation is about 35% slower than dictionary creation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Timing dictionary creation&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;x = { num : &amp;#39;foo&amp;#39; for num in range(0, 1000000)}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;123.48868298530579&lt;/span&gt;

&lt;span class="c"&gt;# Timing Counter creation&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;timeit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;from collections import Counter; x = Counter({ num : &amp;#39;foo&amp;#39; for num in range(0, 1000000)})&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mf"&gt;167.64849400520325&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Creating counters&lt;/h3&gt;
&lt;p&gt;When creating a Counter, you can either create an empty Counter, or you can pass it an iterable whose items
you want to count. If you pass it an iterable, most of the activity to create the Counter takes place in
its &lt;code&gt;update&lt;/code&gt; method - &lt;code&gt;Counter.__init__()&lt;/code&gt; just creates an
empty Counter, then updates it with values from the iterable. For example, here are the interesting parts
of cProfile output on code to create a Counter of 1,500 elements 1,000 times. &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ncalls&lt;/th&gt;
&lt;th&gt;tottime&lt;/th&gt;
&lt;th&gt;percall&lt;/th&gt;
&lt;th&gt;cumtime&lt;/th&gt;
&lt;th&gt;percall&lt;/th&gt;
&lt;th&gt;filename:lineno(function)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;0.957&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;1.201&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;collections.py:501(update)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1575000&lt;/td&gt;
&lt;td&gt;0.219&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.219&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;{method 'get' of 'dict' objects}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36000&lt;/td&gt;
&lt;td&gt;0.020&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.020&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;counter-perf-test.py:18(&lt;genexpr&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;0.003&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.004&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;abc.py:128(&lt;strong&gt;instancecheck&lt;/strong&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000&lt;/td&gt;
&lt;td&gt;0.002&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;1.203&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;collections.py:438(&lt;strong&gt;init&lt;/strong&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Counter.update()&lt;/code&gt; takes by far the most time, and on top of that
it's what calls most of the functions below it. What does it look like?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;self_get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c"&gt;# fast path when counter is empty&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;self_get&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;iterable&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kwds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;First, &lt;code&gt;update&lt;/code&gt; checks to see if the input iterable is a &lt;code&gt;Mapping&lt;/code&gt; - a dictionary or 
dictionary subclass (like a Counter). This is so it can use the &lt;code&gt;update&lt;/code&gt; method of 
Counter's parent class, &lt;code&gt;dict&lt;/code&gt;, if the Counter is empty - a performance enhancement.&lt;/p&gt;
&lt;p&gt;If the input iterable is not a &lt;code&gt;Mapping&lt;/code&gt;, or if the Counter already has stuff in it, 
&lt;code&gt;update&lt;/code&gt; loops through the iterator. Each element in the iterator is a key in the 
Counter. As &lt;code&gt;update&lt;/code&gt; loops, it increments the old value stored in &lt;code&gt;self[elem]&lt;/code&gt; by 1. &lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;update&lt;/code&gt; updates values passed by keyword argument, like those shown below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;var&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;
&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;key2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;var&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;key1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The performance hits in &lt;code&gt;update&lt;/code&gt; are in the time it takes to (1) loop through the 
iterator, and (2) &lt;code&gt;get&lt;/code&gt; the Counter value of  each element in the iterator. So 
performance is tied almost entirely to the size of the iterator we're instantiating 
the Counter with.&lt;/p&gt;
&lt;h3&gt;Adding Counters&lt;/h3&gt;
&lt;p&gt;Given that, adding a short Counter to a large Counter shouldn't degrade performance
at all. Here I profile adding a 25-element Counter to the 1500-element one.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ncalls&lt;/th&gt;
&lt;th&gt;tottime&lt;/th&gt;
&lt;th&gt;percall&lt;/th&gt;
&lt;th&gt;cumtime&lt;/th&gt;
&lt;th&gt;percall&lt;/th&gt;
&lt;th&gt;filename:lineno(function)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;1.399&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;1.729&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;collections.py:501(update)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1600000&lt;/td&gt;
&lt;td&gt;0.275&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.275&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;{method 'get' of 'dict' objects}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;0.234&lt;/td&gt;
&lt;td&gt;0.234&lt;/td&gt;
&lt;td&gt;2.063&lt;/td&gt;
&lt;td&gt;2.063&lt;/td&gt;
&lt;td&gt;counter-perf-test.py:6(main)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1035&lt;/td&gt;
&lt;td&gt;0.046&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.060&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;random.py:291(sample)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36000&lt;/td&gt;
&lt;td&gt;0.040&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.040&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;counter-perf-test.py:18(&lt;genexpr&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36000&lt;/td&gt;
&lt;td&gt;0.032&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.032&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;counter-perf-test.py:22(&lt;genexpr&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;0.007&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.013&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;abc.py:128(&lt;strong&gt;instancecheck&lt;/strong&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2000&lt;/td&gt;
&lt;td&gt;0.007&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;1.736&lt;/td&gt;
&lt;td&gt;0.001&lt;/td&gt;
&lt;td&gt;collections.py:438(&lt;strong&gt;init&lt;/strong&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25358&lt;/td&gt;
&lt;td&gt;0.006&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;0.006&lt;/td&gt;
&lt;td&gt;0.000&lt;/td&gt;
&lt;td&gt;{method 'add' of 'set' objects}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Why does this lengthen the code's running time by 60%? I was surprised, because
the new Counter is not very big, and I'm not making any copies  - I thought that adding
Counters would be quick. Let's look at &lt;code&gt;Counter__add__()&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__add__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;NotImplemented&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;newcount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;newcount&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;newcount&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's why it takes so long: it creates an entirely new counter (&lt;code&gt;result&lt;/code&gt;) by
iterating through the items in both of the input Counters (&lt;code&gt;self.items()&lt;/code&gt; and &lt;code&gt;other.items()&lt;/code&gt;).
Adding two Counters takes the same amount of time as it took to instantiate those
Counters initially.&lt;/p&gt;
&lt;p&gt;Gah. Looks like I'll have to come up with another idea to improve my program's running time.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katrina Ellison Geltman</dc:creator><pubDate>Wed, 16 Apr 2014 19:04:00 +0200</pubDate><guid>tag:,2014-04-16:python-counter-performance.html</guid></item><item><title>Counting Overlapping Elements in Python</title><link>/python-counters.html</link><description>&lt;p&gt;Say you have a list of lists, like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;matrix = [[1, 2, 3], [4, 5, 6], [1, 2, 6]]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You want to know how many times pairs of numbers occur in the same list, or overlap. 
In the example above, you'd have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1 &amp;amp; 2: paired twice&lt;/li&gt;
&lt;li&gt;1 &amp;amp; 3: paired once&lt;/li&gt;
&lt;li&gt;2 &amp;amp; 3: paired once&lt;/li&gt;
&lt;li&gt;4 &amp;amp; 5: paired once&lt;/li&gt;
&lt;li&gt;4 &amp;amp; 6: paired once&lt;/li&gt;
&lt;li&gt;5 &amp;amp; 6: paired once&lt;/li&gt;
&lt;li&gt;1 &amp;amp; 6: paired once&lt;/li&gt;
&lt;li&gt;2 &amp;amp; 6: paired once&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You'd like some code that tells you that there's one pairing that occur twice and
seven pairings that occur once. &lt;a href="http://stackoverflow.com/questions/10844556/python-counting-frequency-of-pairs-of-elements-in-a-list-of-lists"&gt;Stack Overflow will tell you how to do it&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Counter&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;
&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_iterable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;matrix&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That works, but it's completely confusing. I'm going to break down what it's doing, beginning
with &lt;code&gt;combinations(row, 2)&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Producing combinations&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;combinations()&lt;/code&gt; produces an iterator containing the pairs 
in an input iterable (e.g. a list).
The code below uses &lt;code&gt;combinations&lt;/code&gt; to generate all the pairs in the matrix's first
row. Each tuple represents one pairing; for example, &lt;code&gt;(1, 2)&lt;/code&gt; indicates that
1 and 2 were in the same row one time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; x = combinations(matrix[0], 2)

&amp;gt;&amp;gt;&amp;gt; print x
&amp;lt;itertools.combinations object at 0x10d1719f0&amp;gt;

&amp;gt;&amp;gt;&amp;gt; print list(x)
[(1, 2), (1, 3), (2, 3)]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To find the combinations in all of the rows in the matrix, we apply &lt;code&gt;combinations()&lt;/code&gt;
to each row through a generator comprehension. A generator comprehension has the 
same syntax as a list comprehension but produces a generator instead of a list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; combos = (combinations(row, 2) for row in matrix)

&amp;gt;&amp;gt;&amp;gt; print combos
&amp;lt;generator object &amp;lt;genexpr&amp;gt; at 0x10d168f00&amp;gt;

&amp;gt;&amp;gt;&amp;gt; print [list(x) for x in combos]
[[(1, 2), (1, 3), (2, 3)], [(4, 5), (4, 6), (5, 6)], [(1, 2), (1, 6), (2, 6)]]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Chaining the combinations&lt;/h4&gt;
&lt;p&gt;Our end goal is to count how many there are of each tuple; we should end up with one
that occurs twice (&lt;code&gt;(1, 2)&lt;/code&gt;) and seven that occur once. By inspecting the output above,
&lt;em&gt;we&lt;/em&gt; can see that this is the case, but Python can't because the tuples aren't all 
in the same combinations object. Enter &lt;code&gt;chain.from_iterable()&lt;/code&gt;, a function that will combine each of the &lt;code&gt;combinations&lt;/code&gt; objects in 
&lt;code&gt;combos&lt;/code&gt; into one giant iterator:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; chained_combos = chain.from_iterable(combos)
&amp;gt;&amp;gt;&amp;gt; list(chained_combos)
[(1, 2), (1, 3), (2, 3), (4, 5), (4, 6), (5, 6), (1, 2), (1, 6), (2, 6)]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Counting the pairs in the chain&lt;/h4&gt;
&lt;p&gt;Now we can create a &lt;code&gt;Counter&lt;/code&gt; object to tally the frequency of each pairing.
A &lt;code&gt;Counter&lt;/code&gt; is a type of dictionary used for creating tallies: the keys are the items
you're counting, and the values are the tallies.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; counts = Counter(chained_combos)
&amp;gt;&amp;gt;&amp;gt; print counts
Counter({(1, 2): 2, (1, 3): 1, (4, 6): 1, (4, 5): 1, (5, 6): 1, (2, 6): 1, (2, 3): 1, (1, 6): 1})
&amp;gt;&amp;gt;&amp;gt; print counts.values()
[2, 1, 1, 1, 1, 1, 1, 1]
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Tallying the overall frequencies&lt;/h4&gt;
&lt;p&gt;Finally, to count the overall frequencies,
we use a second counter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; overall_counts = Counter(counts.values())
&amp;gt;&amp;gt;&amp;gt; print overall_counts
Counter({1: 7, 2: 1})
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ta da! 7 pairs together once, 1 pair together twice. &lt;/p&gt;
&lt;p&gt;This can be easily extended from
pairs to trios, quartets, and larger groups by replacing &lt;code&gt;combinations(row, 2)&lt;/code&gt; with
&lt;code&gt;combinations(row, &amp;lt;your-size&amp;gt;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, an important note: this will only work if the values inside each tuple 
are always listed
in the same order. &lt;code&gt;(1, 2)&lt;/code&gt; is not the same as &lt;code&gt;(2, 1)&lt;/code&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katrina Ellison Geltman</dc:creator><pubDate>Wed, 16 Apr 2014 10:20:00 +0200</pubDate><guid>tag:,2014-04-16:python-counters.html</guid></item><item><title>Debugging the Arduino WiFi Shield</title><link>/arduino-debugging.html</link><description>&lt;h3&gt;The Problem&lt;/h3&gt;
&lt;p&gt;After disconnecting from the internet, the Arduno WiFi shield (sitting atop
an Uno)
is able to reconnect, but cannot re-start a server.&lt;/p&gt;
&lt;p&gt;For example, here's the output of running the built-in &lt;code&gt;SimpleWebServerWiFi&lt;/code&gt; sketch
(you can find it in the Arduino IDE under File &amp;gt; Examples &amp;gt; WiFi &amp;gt; SimpleWebServerWiFi).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;Attempting&lt;/span&gt; &lt;span class="s-Atom"&gt;to&lt;/span&gt; &lt;span class="s-Atom"&gt;connect&lt;/span&gt; &lt;span class="s-Atom"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;Network&lt;/span&gt; &lt;span class="nn"&gt;named&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s-Atom"&gt;my&lt;/span&gt; &lt;span class="s-Atom"&gt;network&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;SSID&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s-Atom"&gt;my&lt;/span&gt; &lt;span class="s-Atom"&gt;network&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nv"&gt;IP&lt;/span&gt; &lt;span class="nv"&gt;Address&lt;/span&gt;&lt;span class="s-Atom"&gt;:&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="s-Atom"&gt;my&lt;/span&gt; &lt;span class="nv"&gt;IP&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="s-Atom"&gt;signal&lt;/span&gt; &lt;span class="nf"&gt;strength&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;RSSI&lt;/span&gt;&lt;span class="p"&gt;):-&lt;/span&gt;&lt;span class="mi"&gt;46&lt;/span&gt; &lt;span class="s-Atom"&gt;dBm&lt;/span&gt;
&lt;span class="nv"&gt;To&lt;/span&gt; &lt;span class="s-Atom"&gt;see&lt;/span&gt; &lt;span class="s-Atom"&gt;this&lt;/span&gt; &lt;span class="s-Atom"&gt;page&lt;/span&gt; &lt;span class="s-Atom"&gt;in&lt;/span&gt; &lt;span class="s-Atom"&gt;action&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s-Atom"&gt;open&lt;/span&gt; &lt;span class="s-Atom"&gt;a&lt;/span&gt; &lt;span class="s-Atom"&gt;browser&lt;/span&gt; &lt;span class="s-Atom"&gt;to&lt;/span&gt; &lt;span class="nn"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="s-Atom"&gt;//&amp;lt;my&lt;/span&gt; &lt;span class="nv"&gt;IP&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Great - I think I'm connected! I can successfully ping the Arduino's IP address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ping &amp;lt;my IP&amp;gt;
PING &amp;lt;my IP&amp;gt; &lt;span class="o"&gt;(&lt;/span&gt;&amp;lt;my IP&amp;gt;&lt;span class="o"&gt;)&lt;/span&gt;: &lt;span class="m"&gt;56&lt;/span&gt; data bytes
&lt;span class="m"&gt;64&lt;/span&gt; bytes from &amp;lt;my IP&amp;gt;: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;4.371 ms
&lt;span class="m"&gt;64&lt;/span&gt; bytes from &amp;lt;my IP&amp;gt;: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;6.826 ms
&lt;span class="m"&gt;64&lt;/span&gt; bytes from &amp;lt;my IP&amp;gt;: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;17.500 ms
&lt;span class="m"&gt;64&lt;/span&gt; bytes from &amp;lt;my IP&amp;gt;: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;5.556 ms
&lt;span class="m"&gt;64&lt;/span&gt; bytes from &amp;lt;my IP&amp;gt;: &lt;span class="nv"&gt;icmp_seq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt; &lt;span class="nv"&gt;ttl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;255&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;7.440 ms
^C
--- &amp;lt;my IP&amp;gt; ping statistics ---
&lt;span class="m"&gt;5&lt;/span&gt; packets transmitted, &lt;span class="m"&gt;5&lt;/span&gt; packets received, 0.0% packet loss
round-trip min/avg/max/stddev &lt;span class="o"&gt;=&lt;/span&gt; 4.371/8.339/17.500/4.701 ms
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But I can’t complete HTTP requests:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;curl -G http://&amp;lt;my IP&amp;gt;
curl: &lt;span class="o"&gt;(&lt;/span&gt;7&lt;span class="o"&gt;)&lt;/span&gt; Failed connect to &amp;lt;my IP&amp;gt;:80&lt;span class="p"&gt;;&lt;/span&gt; Connection refused
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And using telnet is just weird:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;telnet &amp;lt;my IP&amp;gt;
Trying &amp;lt;my IP&amp;gt;...
Connected to &amp;lt;my IP&amp;gt;.
Escape character is &lt;span class="s1"&gt;&amp;#39;^]&amp;#39;&lt;/span&gt;.
Hello, client!
^C^&lt;span class="o"&gt;]&lt;/span&gt; Iso conf am uso confsued^Msed?? // should be &lt;span class="s1"&gt;&amp;#39;I am so confused??&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Getting started&lt;/h3&gt;
&lt;p&gt;To test what happens when the Arduino disconnects from the WiFi network,
I wrote some code to automatically disconnect every tenth time through
Arduino's event loop, &lt;code&gt;loop()&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void loop() {
  if (i % 10 == 0) {
Serial.println(&amp;quot;\nPurposely disconnecting WiFi\n&amp;quot;);
WiFi.disconnect();
delay(5000);
WiFiSetup();
  }
  i = i + 1;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happens? The server restarts every time, but on a different socket
- and it leaves the old socket in use. This means that after 4 tries
(there are 4 sockets) it can’t restart anymore. I also think it could 
be creating the strange client connection problems - because socket 0 is never
closed, the client always tries to connect to it, but the server is
actually on socket 1... or 2... or 3...&lt;/p&gt;
&lt;h4&gt;Idea #1: Call &lt;code&gt;client.stop()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Another Hacker Schooler with more networking experience than I have
thought that calling &lt;code&gt;client.stop()&lt;/code&gt; might stop the server manually.
His hypothesis was that Arduino’s 'client' is actually what most
networking libraries call a 'socket', and that stopping the client
might close the socket.&lt;/p&gt;
&lt;p&gt;I wrote a simple sketch to test it, but it didn't work: &lt;code&gt;client.stop()&lt;/code&gt;
stops the client, but not the server. At least that's expected behavior!&lt;/p&gt;
&lt;h4&gt;Idea #2: Mimic solution to Arduino issue #1720&lt;/h4&gt;
&lt;p&gt;I found a relevant-seeming issue on Github: 
&lt;a href="https://github.com/Arduino/Arduino/issues/1720"&gt;WiFi shield client does not release socket on connect fail&lt;/a&gt;. The poster fixed the problem by editing 
&lt;code&gt;connect()&lt;/code&gt; in WiFiClient.cpp, specifically by adding this single line
to &lt;code&gt;WiFiClient::connect()&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(!&lt;/span&gt;&lt;span class="nt"&gt;connected&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;Add&lt;/span&gt; &lt;span class="n"&gt;this&lt;/span&gt;
    &lt;span class="n"&gt;WiFiClass&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;_state&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_sock&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;//&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;

    &lt;span class="n"&gt;return&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This line runs if the client fails to connect; it resets
the socket to make it available for another client.&lt;/p&gt;
&lt;p&gt;My problem isn't exactly the same as this one - I'm dealing with a
dropped connection, not a failed connect attempt, and with a server,
not a client - but it seems similar enough to use
as inspiration.&lt;/p&gt;
&lt;p&gt;It seems like I want something similar, but in some &lt;code&gt;disconnect()&lt;/code&gt;
method,
so that the socket is closed when the WiFi disconnects.&lt;/p&gt;
&lt;p&gt;The WiFi shield does have a &lt;code&gt;disconnect()&lt;/code&gt; method, located in WiFi.cpp, 
which then points to a method in 
utility/WiFi_drv.cpp. Great. &lt;code&gt;disconnect()&lt;/code&gt; issues actual assembly 
commands. I really didn't want to debug Assembly 
(well, at least not that day). I moved on for the moment.&lt;/p&gt;
&lt;h3&gt;Some success! The server re-starts&lt;/h3&gt;
&lt;p&gt;With the help of #1720 above, I figured out that the state 
of the WiFi object's sockets
is stored in an array called &lt;code&gt;_state&lt;/code&gt;, and the port running
on each socket is stored in an array called &lt;code&gt;_server_port&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If a socket is not in use, its state
is -1 and its port is 0. If it's being used, its state is equal
to the socket number and the port is the number of of whatever
port it's running on. So if &lt;code&gt;_state&lt;/code&gt; is &lt;code&gt;[-1, -1, 2, -1]&lt;/code&gt; and &lt;code&gt;_server_port&lt;/code&gt; is
&lt;code&gt;[0, 0, 80, 0]&lt;/code&gt;, that indicates that a server is using
socket 2 and listening on port 80.&lt;/p&gt;
&lt;p&gt;These numbers weren't being reset when the WiFi disconnected,
which meant that the server couldn't restart properly.
To fix it, I created a &lt;code&gt;disconnect()&lt;/code&gt; method in 
WiFiServer.cpp:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;void&lt;/span&gt; &lt;span class="nt"&gt;WiFiServer&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;:disconnect&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;WiFiClass&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;_state&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_sock&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;-1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;WiFiClass&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;_server_port&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;_sock&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This frees the socket the server was listening on
by setting its state to -1 and shuts down the port by
resetting it from 80 to 0.&lt;/p&gt;
&lt;p&gt;Cool! That worked! Sort of. Now I can release the socket
and port, and re-connect to them.
The problem is that the server doesn’t actually restart.&lt;/p&gt;
&lt;p&gt;Fortunately, I discovered that this problem had a simple fix: delaying
before restarting the WiFi.
Adding the line &lt;code&gt;delay(10000);&lt;/code&gt; before running &lt;code&gt;WiFiSetup()&lt;/code&gt; does
the trick:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;void loop() {
Serial.println(&amp;quot;\nPurposely disconnecting WiFi\n&amp;quot;);
server.disconnect();
WiFi.disconnect();
delay(10000);
WiFiSetup();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Big problem: the client doesn't restart&lt;/h3&gt;
&lt;p&gt;This is where I got stuck: restarting the server after a client has connected
to it. Even though &lt;code&gt;client.stop()&lt;/code&gt; is always called before the WiFi is
disconnected, things don't go smoothly.&lt;/p&gt;
&lt;p&gt;In my test sketches, I always examine the Arduino's sockets, ports, and
server and client states before reconnecting, just to make sure they were
reset properly. When I examine the client using &lt;code&gt;serverDrv.getClientState()&lt;/code&gt;,
everything - &lt;em&gt;everything&lt;/em&gt; - hangs indefinitely:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Purposely disconnecting WiFi

********************************

Initial socket status (before new connection):
-1  0  s=0  c=
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even weirder is that the client doesn’t &lt;em&gt;always&lt;/em&gt; get in the way - a couple of times,
things have worked 100% perfectly (started server, sent message from client,
disconnected WiFi, reconnected server, successfully sent a new message from client).&lt;/p&gt;
&lt;p&gt;Every time I mentioned to people that I was experiencing a non-deterministic
bug, they started chanting, "Memory leak! Memory leak!". Fortunately, Arduino has
a function, &lt;code&gt;freeMemory()&lt;/code&gt;, for reporting its available memory. I added
print statements everywhere to keep track of this, but found it never changed
significantly.&lt;/p&gt;
&lt;h4&gt;The big problem: no handshake!&lt;/h4&gt;
&lt;p&gt;I added print statements to that &lt;code&gt;serverDrv.getClientState()&lt;/code&gt; so I could see precisely
where it got stuck. It's during the line &lt;code&gt;SpiDrv::waitForSlaveReady()&lt;/code&gt;. All this does
is instruct the Arduino to wait while a pin called &lt;code&gt;SLAVEREADY&lt;/code&gt; - the
Arduino-WiFi Shield handshake pin - is high.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#define waitSlaveReady() (digitalRead(SLAVEREADY) == LOW)
void SpiDrv::waitForSlaveReady()
{
    while (!waitSlaveReady());
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No matter how long I wait, that friggin slave just isn't ready.
If this is the problem, I'm going to have to throw in the towel. There's
no more code to debug - I'd have to get out datasheets and begin
from there. &lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katrina Ellison Geltman</dc:creator><pubDate>Tue, 01 Apr 2014 12:03:00 +0200</pubDate><guid>tag:,2014-04-01:arduino-debugging.html</guid></item><item><title>How to Update the Arduino WiFi Shield Firmware</title><link>/arduino-wifi-firmware-upgrade.html</link><description>&lt;p&gt;The firmware that ships with the Arduino WiFi shield (v. 1.0.0) doesn't work properly. 
Fortunately, they've written new firmware (v. 1.1.0). Unfortunately, updating it is
a bit tricky. I found both the
&lt;a href="http://arduino.cc/en/Hacking/WiFiShieldFirmwareUpgrading"&gt;official Arduino instructions&lt;/a&gt;
and the &lt;a href="http://flashgamer.com/arduino/comments/how-to-update-the-official-arduino-wifi-shield"&gt;instructions at Flashgamer.com&lt;/a&gt; helpful (particularly the latter), but neither of them
worked perfectly for me, and after I completed them I had trouble telling if the 
firmware was updated or not.&lt;/p&gt;
&lt;p&gt;I've had to complete this process several times now. Here's what is consistently
working for me.&lt;/p&gt;
&lt;h3&gt;1&lt;sup&gt;st&lt;/sup&gt;: Get the Firmware&lt;/h3&gt;
&lt;h4&gt;From your Arduino IDE&lt;/h4&gt;
&lt;p&gt;If you have the Arduino IDE v. 1.0.5, the new firmware should be inside - you can skip the rest of this section. 
(I'm not sure about other IDE versions). On my Mac, the IDE
is at &lt;code&gt;/Applications/Arduino.app&lt;/code&gt; and the WiFi firmware is at &lt;code&gt;/Applications/Arduino.app/Contents/Resources/Java/hardware/arduino/firmwares/wifishield&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can double-check that you have the right version by going to lines 41-42 of 
&lt;code&gt;wifishield/wifiHD/src/main.c&lt;/code&gt;. They should say this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* FIRMWARE version */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
const&lt;span class="w"&gt; &lt;/span&gt;char&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;fwVersion&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.1.0&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;From Github&lt;/h4&gt;
&lt;p&gt;The code is also on Github if you need it. There are two versions
on Arduino’s Github account:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;https://github.com/arduino/wifishield (firmware last updated 2013-01-19)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/arduino/Arduino/tree/master/hardware/arduino/firmwares/wifishield"&gt;https://github.com/arduino/Arduino/tree/master/hardware/arduino/firmwares/wifishield&lt;/a&gt; (firmware last upgraded 2013-03-28)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The second repository is the one you want.&lt;/strong&gt; The first one contains the old firmware.&lt;/p&gt;
&lt;p&gt;Cloning the second repo is a pain because you have
to download the full Arduino IDE, not just the WiFi shield firmware,
and the repository is over 250 MB. I found it easier to just download the
individual files, which are located in the &lt;code&gt;wifishield&lt;/code&gt; folder linked to above.&lt;/p&gt;
&lt;h4&gt;Where should I put it?&lt;/h4&gt;
&lt;p&gt;The official instructions are not clear about where to keep the new firmware. Putting
them in an arbitrary folder 
caused me a lot of problems later on. I recommend keeping the new version
where the old version used to be.
Back up the old firmware with version control or by copying it to a different
directory outside of Arduino.app.&lt;/p&gt;
&lt;h3&gt;2&lt;sup&gt;nd&lt;/sup&gt;: DFU Programmer&lt;/h3&gt;
&lt;p&gt;DFU Programmer is the software that gets your new firmware on your Arduino 
(DFU stands for 'Device Firmware Update'). I was able to download it using
&lt;a href="http://arduino.cc/en/Hacking/WiFiShieldFirmwareUpgrading"&gt;the official Arduino instructions&lt;/a&gt;,
but you can also get DFU Programmer directly from its 
&lt;a href="http://dfu-programmer.sourceforge.net/"&gt;project homepage&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;3&lt;sup&gt;rd&lt;/sup&gt;: Set the Jumper&lt;/h3&gt;
&lt;p&gt;You need to set the jumper to put the WiFi shield in programmable mode.
The jumper is a a tall, rectangular piece on your WiFi shield, located near the
power and ground pins.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Arduino WiFi Jumper" src="/images/arduino/arduino-wifi-jumper.jpg" title="Arduino WiFi Jumper" /&gt;&lt;/p&gt;
&lt;p&gt;The jumper is held up by two pins. Actually, right now it should only sit on one of the pins 
(as shown in the picture above).
To set it, pull it off and replace it so that it sits over both pins. This puts the shield in
programmable mode, allowing you to update the firmware. After the update, you'll need to unset it before
you use your Arduino again.&lt;/p&gt;
&lt;h3&gt;4&lt;sup&gt;th&lt;/sup&gt;: Fix the Path in the Install Script&lt;/h3&gt;
&lt;p&gt;If you're on Linux
or Mac, you can transfer the new firmware to the Arduino with one of the install scripts 
in &lt;code&gt;wifishield/firmware/scripts/&lt;/code&gt;
(&lt;code&gt;ArduinoWifiShield_upgrade.sh&lt;/code&gt; for Linux, &lt;code&gt;ArduinoWifiShield_upgrade.sh&lt;/code&gt; for Mac).
Before you run them, you'll have to fix a small error in the path
where it looks for the firmware. Change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;WIFI_FW_PATH=&amp;quot;/hardware/arduino/firmwares/wifi-shield&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;WIFI_FW_PATH=&amp;quot;/hardware/arduino/firmwares/wifishield&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;5&lt;sup&gt;th&lt;/sup&gt;: Upload the Firmware&lt;/h3&gt;
&lt;p&gt;It's go time! Link your WiFi shield to your computer using a mini USB cable (&lt;em&gt;don't&lt;/em&gt; 
leave the shield connected to the Arduino). Then run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd wifishield/firmware/scripts
sudo sh ArduinoWifiShield_upgrade_mac.sh -a /Applications/Arduino.app/Contents/Resources/Java -f shield
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should see output like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;       Arduino WiFi Shield upgrade
=========================================
Disclaimer: to access to the USB devices correctly, the dfu-programmer 
needs to be used as root. Run this script as root.

****Upgrade WiFi Shield firmware****

Validating...
257254 bytes used (101.30%)

Done. Remove the J3 jumper and press the RESET button on the shield.
Thank you!
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;6&lt;sup&gt;th&lt;/sup&gt;: Check that the install was successful&lt;/h3&gt;
&lt;p&gt;To verify that your WiFi shield is using the new firmware,
mount the WiFi shield on your Arduino and upload this sketch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;WiFi.h&amp;gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9600&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;the version is: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;Serial&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WiFi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;firmwareVersion&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check the serial output (in the IDE, you can do this by clicking on the magnifying
glass at the upper right corner of the sketch). It should say:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;the version is:
1.1.0
&lt;/pre&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katrina Ellison Geltman</dc:creator><pubDate>Fri, 21 Mar 2014 11:41:00 +0100</pubDate><guid>tag:,2014-03-21:arduino-wifi-firmware-upgrade.html</guid><category>Arduino</category></item><item><title>My Seating Chart Software Saga</title><link>/seating-chart-saga.html</link><description>&lt;p&gt;For the first few weeks of Hacker School, I've been working on a
project that began last summer, when I volunteered to help out
one of my husband's co-workers. She's responsible for putting together
the seating chart for a five-day-long conference every year. She spends 
a week obsessing
over it, making sure that people don't sit together too frequently and
that they don't get trapped in the back corner every day. 
I jumped at the chance to automate the seating chart's
creation, thinking it would take me a weekend.&lt;/p&gt;
&lt;p&gt;Boy, was I wrong. I did crank out a disgusting-looking script in time 
for the conference, but my approach - a basic greedy strategy - didn't
achieve perfection, and I had no idea what would be better. My husband's
co-worker was grateful but disappointed. I was
vaguely ashamed. Still, she liked it
well enough that she asked for it so she could use it again next year.&lt;/p&gt;
&lt;p&gt;At that point I was embarrassed at the mere thought of anyone else
ever laying eyes on the code, so I started cleaning it up - but I
still had no idea about how to improve my results. It distressed
me that I couldn't prove whether or not there was an optimal solution,
or even figure out how many possibilities there were. I tried
several times, but my math skills just weren't up to it.&lt;/p&gt;
&lt;p&gt;Gripped by my problem, I bought
&lt;a href="http://www.amazon.com/Introduction-Algorithms-Thomas-H-Cormen/dp/0262033844"&gt;CLRS&lt;/a&gt;
and took an undergrad algorithms course (it was disappointing). I got the
&lt;a href="http://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1848000693/ref=pd_sim_b_4/187-1310092-7742419?ie=UTF8&amp;amp;refRID=1D6919RZAFGT9RXXAP9W"&gt;Algorithm Design Manual&lt;/a&gt;,
which seemed like it would be useful, but by then my free time had decreased
and I had to table the project until Hacker School began.&lt;/p&gt;
&lt;p&gt;By the time I was there, I had decided that &lt;a href="/sim-anneal-overview.html"&gt;simulated annealing&lt;/a&gt;
might be what I wanted. HS resident
Greg agreed that this was a good strategy, and I set out to implement it.
My early results were discouraging. I was now using an appropriate
algorithm, but my seating charts were no better than the ones I
had generated using my na&amp;iuml;ve one. &lt;/p&gt;
&lt;p&gt;I kept tweaking the annealing parameters, though, and
started to make some progress. I eventually got to a point
where I was consistently achieving costs between 60 and 100, which
was amazing compared to the 2,000 - 5,000 range of my greedy
strategy, to say nothing of the cost of random solutions, which could range into the millions.&lt;/p&gt;
&lt;p&gt;And then one day, riding home on the train,
I made a minor change, re-ran the program, and saw:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Achieving zero cost" src="/images/zero_cost.png" /&gt;&lt;/p&gt;
&lt;p&gt;!!! &lt;/p&gt;
&lt;p&gt;I couldn't believe it. 8 months after I'd happened upon this problem,
I'd finally found what I was looking for. It wasn't a fluke
- subsequent runs confirmed that my program really did work.&lt;/p&gt;
&lt;p&gt;Of course, to make this a deliverable application, 
there's still a lot to do: make it faster, build a GUI
(gulp), write documentation, achieve reasonable test
coverage... &lt;/p&gt;
&lt;p&gt;This isn't paid work - the repo is &lt;a href="https://github.com/KatrinaE/seating"&gt;on Github&lt;/a&gt;
- so in a way it's tempting to put it aside now that I've
conquered the part of it that was so vexing. Now, 
though, I don't think I'll be satisfied until
I can put a stamp on this project and say 'done'. In its current form,
the code is really 'for' this one person (because a
fair amount is hard-coded into it), and I almost feel like it
would be rude for me to have worked on her fun problem all year 
without giving her anything in return. &lt;/p&gt;
&lt;p&gt;So my plan is
to get all of those things done within the next few months
- in time for this year's conference.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katrina Ellison Geltman</dc:creator><pubDate>Sun, 02 Mar 2014 21:30:00 +0100</pubDate><guid>tag:,2014-03-02:seating-chart-saga.html</guid><category>Seating Chart</category><category>narratives</category></item><item><title>The Simulated Annealing Algorithm</title><link>/simulated-annealing.html</link><description>&lt;p&gt;Simulated annealing is a method for finding a good (not necessarily
perfect) solution to an optimization problem. If you're in a
situation where you want to maximize or minimize something, your
problem can likely be tackled with simulated annealing.&lt;/p&gt;
&lt;p&gt;The traveling salesman problem is a good example: the salesman
is looking to visit a set of cities in the order that minimizes
the total number of miles he travels. As the number of cities gets
large, it becomes too computationally intensive to check every
possible itinerary. At that point, you need an algorithm.&lt;/p&gt;
&lt;h3&gt;Why choose simulated annealing?&lt;/h3&gt;
&lt;p&gt;There are many optimization algorithms, including hill climbing,
genetic algorithms, gradient descent, and more. 
Simulated annealing's strength
is that it avoids getting caught at local maxima - solutions that
are better than any others nearby, but aren't the very best.&lt;/p&gt;
&lt;p&gt;You can visualize this by imagining a 2D graph like the one below.
Each x-coordinate represents a particular solution (e.g., a
particular itinerary for the salesman). Each y-coordinate represents
how good that solution is (e.g., the inverse
of that itinerary's mileage).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Optimization problem solution space" src="/images/sim_anneal/sol-space1.png" title="Solution space" /&gt;&lt;/p&gt;
&lt;p&gt;Broadly, an optimization algorithm searches for the best solution
by generating a random initial solution and
"exploring" the area nearby. If a neighboring solution is better
than the current one, then it moves to it. If not, then
the algorithm stays put. &lt;/p&gt;
&lt;p&gt;This is perfectly logical, but it can
lead to situations where you're stuck at a sub-optimal place.
In the graph below, the best solution is at the yellow star
on the left. But if a simple algorithm finds its way to the
green star on the right, it won't move away from it:
all of the neighboring solutions are worse. The green star is a
local maximum.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Optimization problem solution space 2" src="/images/sim_anneal/sol-space2.png" title="Solution space" /&gt;&lt;/p&gt;
&lt;p&gt;Simulated annealing injects just the right amount of randomness into
things to escape local maxima early in the process without getting
off course late in the game, when a solution is nearby. This makes
it pretty good at tracking down a decent answer, no matter its
starting point.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Optimization problem solution space 3" src="/images/sim_anneal/sol-space3.png" title="Solution space" /&gt;&lt;/p&gt;
&lt;p&gt;On top of this, simulated annealing is not that
difficult to implement, despite its somewhat scary name.&lt;/p&gt;
&lt;h3&gt;The basic algorithm&lt;/h3&gt;
&lt;p&gt;Here's a really high-level overview. It skips some very important
details, which we'll get to in a moment.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, generate a random solution&lt;/li&gt;
&lt;li&gt;Calculate its cost using some cost function you've defined&lt;/li&gt;
&lt;li&gt;Generate a random neighboring solution&lt;/li&gt;
&lt;li&gt;Calculate the new solution's cost&lt;/li&gt;
&lt;li&gt;Compare them:&lt;ul&gt;
&lt;li&gt;If c&lt;sub&gt;new&lt;/sub&gt; &amp;lt; c&lt;sub&gt;old&lt;/sub&gt;: move to the new solution&lt;/li&gt;
&lt;li&gt;If c&lt;sub&gt;new&lt;/sub&gt; &amp;gt; c&lt;sub&gt;old&lt;/sub&gt;: &lt;em&gt;maybe&lt;/em&gt; move to the new solution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Repeat steps 3-5 above until an acceptable solution is found or
    you reach some maximum number of iterations.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Let's break it down&lt;/h3&gt;
&lt;h5&gt;First, generate a random solution&lt;/h5&gt;
&lt;p&gt;You can do this however you want. The main point is that it's random
- it doesn't need to be be your best guess at the optimal
solution.&lt;/p&gt;
&lt;h5&gt;Calculate its cost using some cost function you've defined&lt;/h5&gt;
&lt;p&gt;This, too, is entirely up to you. Depending on your problem, it 
might be as simple as counting
the total number of miles the traveling salesman's traveled. Or it might
be an incredibly complex melding of multiple factors. Calculating
the cost of each solution is often the most expensive part of the
algorithm, so it pays to keep it simple.&lt;/p&gt;
&lt;h5&gt;Generate a random neighboring solution&lt;/h5&gt;
&lt;p&gt;"Neighboring" means there's only one thing that differs between
the old solution and the new solution. Effectively, you switch
two elements of your solution and re-calculate the cost. The main
requirement is that it be done randomly.&lt;/p&gt;
&lt;h5&gt;Calculate the new solution's cost&lt;/h5&gt;
&lt;p&gt;Use the same cost function as above. You can see why it needs to
perform well - it gets called with each iteration of the algorithm.&lt;/p&gt;
&lt;h5&gt;If c&lt;sub&gt;new&lt;/sub&gt; &amp;lt; c&lt;sub&gt;old&lt;/sub&gt;: move to the new solution&lt;/h5&gt;
&lt;p&gt;If the new solution has a smaller cost than the old solution,
the new one is better. This makes the algorithm happy 
- it's getting closer to an optimum. 
It will "move" to that new solution, saving it as
the base for its next iteration.&lt;/p&gt;
&lt;h5&gt;If c&lt;sub&gt;new&lt;/sub&gt; &amp;gt; c&lt;sub&gt;old&lt;/sub&gt;: &lt;em&gt;maybe&lt;/em&gt; move to the new solution&lt;/h5&gt;
&lt;p&gt;This is where things get interesting. Most of the time, the algorithm
will eschew moving to a worse solution. If it did that all of the
time, though, it would get caught at local maxima. To avoid that
problem, it sometimes elects to keep the worse solution. To decide,
the algorithm calculates something called the 'acceptance probability'
and then compares it to a random number.&lt;/p&gt;
&lt;h3&gt;Those highly important details&lt;/h3&gt;
&lt;p&gt;The explanation above leaves out an extremely important parameter called
the "temperature". The temperature is a function of which iteration
you're on; its name comes from
the fact that this algorithm was inspired by a method of heating
and cooling metals. &lt;/p&gt;
&lt;p&gt;Usually, the temperature is started at 1.0
and is decreased at the end of each iteration by multiplying it
by a constant called $\alpha$. You get to decide what value to
use for $\alpha$; typical choices are between 0.8 and 0.99.&lt;/p&gt;
&lt;p&gt;Furthermore, simulated annealing does better when the 
neighbor-cost-compare-move process is carried about many times
(typically somewhere between 100 and 1,000) at each temperature. So the production-grade
algorithm is somewhat more complicated than the one
discussed above. It's implemented in the example Python code below.&lt;/p&gt;
&lt;h3&gt;Example Code&lt;/h3&gt;
&lt;p&gt;This code is for a very basic version of the simulated
annealing algorithm. A useful additional optimization is to
always keep track of the best solution found so far so that it
can be returned if the algorithm terminates at a sub-optimal place.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;anneal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;old_cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1.0&lt;/span&gt;
    &lt;span class="n"&gt;T_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.00001&lt;/span&gt;
    &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.9&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T_min&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_sol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;neighbor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new_sol&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;ap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;acceptance_probability&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;old_cost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_cost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ap&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
                &lt;span class="n"&gt;sol&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_sol&lt;/span&gt;
                &lt;span class="n"&gt;old_cost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_cost&lt;/span&gt;
            &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sol&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cost&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This skeleton leaves a few gaps for you to fill in: &lt;code&gt;neighbor()&lt;/code&gt;, 
in which you generate a random neighboring solution, 
&lt;code&gt;cost()&lt;/code&gt;, in which you apply your cost function, and 
&lt;code&gt;acceptance_probability()&lt;/code&gt;, which is basically defined for you.&lt;/p&gt;
&lt;h3&gt;The acceptance probability function&lt;/h3&gt;
&lt;p&gt;The acceptance probability function takes in the old cost,
new cost, and current temperature and spits out a number 
between 0 and 1, which is a sort of 
recommendation on whether or not to jump to the new
solution. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.0: definitely switch (the new solution is 
    better)&lt;/li&gt;
&lt;li&gt;0.0: definitely stay put (the new solution 
    is infinitely worse)&lt;/li&gt;
&lt;li&gt;0.5: the odds are 50-50&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once the acceptance probability is calculated, it's compared
to a randomly-generated number
between 0 and 1. If the acceptance probability is larger than the
random number, you're switching!&lt;/p&gt;
&lt;h4&gt;Calculating the acceptance probability&lt;/h4&gt;
&lt;p&gt;The equation typically used for the acceptance probability is:&lt;/p&gt;
&lt;p&gt;$$
a = e^{\frac{c_{new} - c_{old}}{T}}
$$&lt;/p&gt;
&lt;p&gt;where $a$ is the acceptance probability, $(c_{new}-c_{old})$ is the
difference between the new cost and the old one, $T$ is the temperature,
and $e$ is 2.71828, that mathematical constant that pops up in all
sorts of unexpected places.&lt;/p&gt;
&lt;p&gt;This equation is the part of simulated annealing that was inspired
by metalworking. Throw in a constant and it describes the embodied 
energy of metal particles
as they are cooled slowly after being subjected to high heat. 
This process allows the particles to move from a random
configuration to one with a very low embodied energy. Computer scientists
borrow the annealing equation to help them move from a random 
solution to one with a very low cost. &lt;/p&gt;
&lt;p&gt;This equation means that the acceptance probability:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;is always &amp;gt; 1 when the new solution is better than the old one. Since you can't have a probability greater than 100%, we use $\alpha = 1$ in 
this case..&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gets smaller as the new solution gets more worse than the old one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;gets smaller as the temperature decreases (if the new solution 
is worse than the old one)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What this means is that the algorithm is more likely to accept
sort-of-bad jumps than really-bad jumps, and is more likely to accept
them early on, when the temperature is high.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;If you ever have a combinatorial optimization problem to solve,
simulated annealing should cross your mind.
 Plenty of other strategies exist, but as
algorithms expert Steven Skiena says, "[The] simulated annealing
solution works admirably. It is my heuristic method of choice."&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;This post relies heavily on 
&lt;a href="http://www.cs.nott.ac.uk/~gxk/aim/notes/simulatedannealing.doc"&gt;these notes&lt;/a&gt;
from &lt;a href="http://www.cs.nott.ac.uk/~gxk/aim/"&gt;Graham Kendall&lt;/a&gt; at Nottingham University
and on Steven Skiena's &lt;a href="http://www.algorist.com/"&gt;Algorithm Design Manual&lt;/a&gt;. Another excellent source is the 
1983 paper &lt;a href="http://home.gwu.edu/~stroud/classics/KirkpatrickGelattVecchi83.pdf"&gt;"Optimization by Simulated Annealing"&lt;/a&gt; by Kirkpatrick, Gelatti,
and Vecchi. It's a bit dense, but relatively readable for an academic paper.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katrina Ellison Geltman</dc:creator><pubDate>Thu, 20 Feb 2014 19:29:00 +0100</pubDate><guid>tag:,2014-02-20:simulated-annealing.html</guid><category>Seating Chart</category><category>Algorithms</category></item><item><title>Hacker School: Weeks 1 &amp; 2</title><link>/hacker-school-w1.html</link><description>&lt;h3&gt;What is Hacker School?&lt;/h3&gt;
&lt;p&gt;After many times trying and utterly failing to communicate to people
what Hacker School is, I've discovered that it's best to cut to
the chase:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Hacker School is 60 people, in a room, doing whatever they want.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;That's it. It's not a 'program' with any sort of end goal at all.
You could probably sit here and watch YouTube videos all day long
and not get in trouble with anyone. Of course, no one does that.
The Hacker School admissions process aims to find &lt;a href="http://www.hackerschool.com/about#who-comes-to-hacker-school" title="Who Comes to Hacker School?"&gt;smart, friendly, 
self-directed, intellectually curious people who enjoy programming 
and want to get dramatically better&lt;/a&gt;, 
and if my batch is any indication, they do a great job at that. 
So life at Hacker School is a whirlwind of programming-related learning.&lt;/p&gt;
&lt;h3&gt;What do you do there?&lt;/h3&gt;
&lt;p&gt;I'm currently working on a project called Seating
Chart Creator. It's a little Python app I'm building for a friend
who arranges the seating arrangements for a 75-person, 5-day-long 
conference every year. She's imposed a number of cost functions
to minimize - for example, an arrangement is better if fewer people
sit in the same location twice. I've had to think algorithmically,
done a LOT of code refactoring, and will soon need to build a
GUI, which I've never done before.&lt;/p&gt;
&lt;p&gt;But I don't spend all day sitting alone and working on this project. 
For example, yesterday I:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Worked with a facilitator to fix a bug in my program. In the process,
learned (finally!) how doctests work and the difference between &lt;code&gt;repr()&lt;/code&gt;
and &lt;code&gt;str()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Had lunch with two Hacker Schoolers I'd never met before, both of whom
were really interested in my problem. We talked about possible algorithm
choices, including gradient descent, genetic algorithms, and simulated
annealing (my current approach combines the latter with a basic greedy
alg)&lt;/li&gt;
&lt;li&gt;Helped someone who was building his own web framework figure out how
to pass POST data into his app&lt;/li&gt;
&lt;li&gt;Showed someone how to find the current Python executable by typing
&lt;code&gt;which python&lt;/code&gt; into the terminal&lt;/li&gt;
&lt;li&gt;Converted the data structure holding data about each person in my
app from a dictionary to an object (mainly for code clarity)&lt;/li&gt;
&lt;li&gt;Participated in a discussion about why SICP is so great&lt;/li&gt;
&lt;li&gt;Learned that context-dependent message parsing leads to those SSL
certificate errors you get sometimes while you're browsing the internet
(I had trouble wrapping my head around this one... but hopefully next
time I hear about it, it won't sound completely foreign)&lt;/li&gt;
&lt;li&gt;Set up this blog!&lt;/li&gt;
&lt;li&gt;Watched &lt;a href="http://melchua.com/" title="Mel Chua"&gt;Mel Chua&lt;/a&gt; give a talk about 
how programmers learn. I have some background in education, and she drew
upon a lot of the same research that we applied to K-12 settings. It
was really cool to see that information again in this context.&lt;/li&gt;
&lt;li&gt;Met my Hacker School mentor for the first time. HS provides an
alumni mentor for anyone who is interested.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, there's a lot going on here!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Katrina Ellison Geltman</dc:creator><pubDate>Tue, 18 Feb 2014 10:20:00 +0100</pubDate><guid>tag:,2014-02-18:hacker-school-w1.html</guid></item></channel></rss>